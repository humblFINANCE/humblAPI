[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "humblapi"
version = "0.18.1"
description = "A lightweight Fast API app to connect humnlDATA and humblFINANCE"
authors = [
    { name = "Jennings Fantini", email = "jenningsfantini@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.11,<3.13"
urls = { Repository = "https://github.com/humblFINANCE/humblAPI" }

# Main dependencies
dependencies = [
    "uuid7>=0.1.0",
    "coloredlogs>=15.0.1",
    "fastapi[all]>=0.111.0",
    "poethepoet>=0.20.0",
    "uvicorn[standard]>=0.20.0",
    # poetry is a build tool, not a runtime dep typically, removing it
    # "poetry^2.1.1", # Removed
    "humbldata>=1.20.22", # Adjusted version constraint syntax if needed, assuming `>=` is okay based on Poetry's ^
    "fastapi-cache2>=0.2.2",
    "redis>=5.0.7",
    "orjson>=3.10.6",
    "fastapi-limiter>=0.1.6",
]


# Optional dependencies (formerly groups)
[dependency-groups]
test = [
    "commitizen>=3.2.1",
    "cz-conventional-gitmoji>=0.2.0",
    "coverage[toml]>=7.2.5",
    "mypy>=1.2.0",
    "pre-commit>=3.3.1",
    "pytest>=7.3.1",
    "pytest-clarity>=1.0.1",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.2.1",
    "ruff>=0.1.3",
    "safety>=2.3.4,!=2.3.5",
    "shellcheck-py>=0.9.0",
    "typeguard>=3.0.2",
    "pytest-asyncio>=0.23.8",
]
dev = [
    "cruft>=2.14.0",
    "ipykernel>=7.0.0a1",
    "jupyterlab>=3.6.3",
    "pdoc>=14.4.0",
]


[tool.cruft]
skip = ["menv/", "tests"]

[tool.commitizen]
name = "cz_gitmoji"
version = "0.18.1"
tag_format = "v$version"
update_changelog_on_bump = true
annotated_tag = true
bump_message = "🔖 bump(release): v$current_version → v$new_version"
major_version_zero = true
version_files = [
    "pyproject.toml:^version", # Keep this for commitizen to find the version in the [project] table
    "src/humblapi/main.py:version=\"[0-9]+\\.[0-9]+\\.[0-9]+\"" # Reverted to original escaping
]
path = ".cz-config.js"

[tool.commitizen.customize]
example = "feat: this feature enables customizing through pyproject.toml file"
schema = """
<type>(<scope>): <subject> \n
<BLANK LINE> \n
<body> \n
<BLANK LINE> \n
(BREAKING CHANGE: )<breaking> \n
<BLANK LINE> \n
(ISSUES: )<footer>
"""
schema_pattern = "(?s)(✨ feat|🐛 fix|🚑 hotfix|🔧 chore|♻️ refactor|🚧 WIP|📚 docs|⚡️ perf|💄 style|🏗️ build|👷 ci|✅ test|⏪ revert|➕ add_dep|➖ rem_dep)(\\(\\S+\\))?!?:( [^\\n\\r]+)((\\n\\n.*)|(\\s*))?$"
bump_pattern = "^(✨ feat|🐛 fix|🚑 hotfix|⚡️ perf|♻️ refactor|⏪ revert|➕ add_dep|➖ rem_dep)"
bump_map = {"BREAKING CHANGE" = "MAJOR", "✨ feat" = "MINOR", "🐛 fix" = "PATCH", "🚑 hotfix" = "PATCH", "⚡️ perf" = "PATCH", "♻️ refactor" = "PATCH", "➕ add_dep" = "MINOR", "➖ rem_dep" = "MINOR"}
change_type_order = ["BREAKING CHANGE", "✨ feat", "🐛 fix", "🚑 hotfix", "♻️ refactor", "⚡️ perf", "🏗️ build", "💄 style", "📚 docs", "➕ add_dep", "➖ rem_dep"]
info_path = "cz_customize_info.txt"
info = """
This is customized commitizen info
"""
commit_parser = "^(?P<change_type>✨ feat|🐛 fix|🚑 hotfix|🔧 chore|♻️ refactor|🚧 WIP|📚 docs|⚡️ perf|💄 style|🏗️ build|👷 ci|✅ test|⏪ revert|➕ add_dep|➖ rem_dep):\\\\s(?P<message>.*)?" # Escaped \s
changelog_pattern = "^(✨ feat|🐛 fix|🚑 hotfix|🔧 chore|♻️ refactor|🚧 WIP|📚 docs|⚡️ perf|💄 style|🏗️ build|👷 ci|✅ test|⏪ revert|➕ add_dep|➖ rem_dep)?(!)?"
change_type_map = {"🏗️ build" = "Build", "👷 ci" = "CI", "📚 docs" = "Docs", "✨ feat" = "Feat", "🐛 fix" = "Fix", "🚑 hotfix" = "Hotfix", "⚡️ perf" = "Perf", "♻️ refactor" = "Refactor", "💄 style" = "Style", "✅ test" = "Test", "🔧 chore" = "Chore", "⏪ revert" = "Revert", "➕ add_dep" = "Added Dependency", "➖ rem_dep" = "Removed Dependency"}

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
plugins = "pydantic.mypy"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pydantic-mypy]  # https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --typeguard-packages=humblapi --verbosity=2 --junitxml=reports/pytest.xml"
filterwarnings = ["error", "ignore::DeprecationWarning"]
testpaths = ["src", "tests"]
xfail_strict = true

[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
ignore-init-module-imports = true
line-length = 80
select = ["A", "ASYNC", "B", "BLE", "C4", "C90", "D", "DTZ", "E", "EM", "ERA", "F", "FBT", "FLY", "FURB", "G", "I", "ICN", "INP", "INT", "ISC", "LOG", "N", "NPY", "PERF", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "S", "SIM", "SLF", "SLOT", "T10", "T20", "TID", "TRY", "UP", "W", "YTT"]
ignore = ["E501", "S101", "RET504"]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pycodestyle]
max-doc-length = 80

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.poe.tasks]  # https://github.com/nat-n/poethepoet

  [tool.poe.tasks.api]
  help = "Serve a REST API"
  shell = """
    if [ $dev ]
    then {
      uvicorn \
        --host $host \
        --port $port \
        --reload \
        humblapi.api:app
    } else {
      gunicorn \
        --access-logfile - \
        --bind $host:$port \
        --graceful-timeout 10 \
        --keep-alive 10 \
        --log-file - \
        --timeout 30 \
        --worker-class uvicorn.workers.UvicornWorker \
        --worker-tmp-dir /dev/shm \
        --workers 2 \
        humblapi.api:app
    } fi
    """

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"

    [[tool.poe.tasks.api.args]]
    help = "Enable development mode"
    type = "boolean"
    name = "dev"
    options = ["--dev"]

  [tool.poe.tasks.lab]
  help = "Run Jupyter Lab"

    [[tool.poe.tasks.lab.sequence]]
    cmd = "mkdir -p notebooks"

    [[tool.poe.tasks.lab.sequence]]
    cmd = """
      jupyter lab
        --allow-root
        --notebook-dir notebooks
      """

  [tool.poe.tasks.lint]
  help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

    [[tool.poe.tasks.lint.sequence]]
    shell = "safety check --continue-on-error --full-report"

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
